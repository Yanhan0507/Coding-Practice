/*	There are a total of n courses you have to take, labeled from 0 to n - 1.
	
	Some courses may have prerequisites, for example to take course 0 you have
	to first take course 1, which is expressed as a pair: [0,1]
	
	Given the total number of courses and a list of prerequisite pairs, is it 
	possible for you to finish all courses?
	
	For example:
	
	2, [[1,0]]
	There are a total of 2 courses to take. To take course 1 you should have 
	finished course 0. So it is possible.
	
	2, [[1,0],[0,1]]
	There are a total of 2 courses to take. To take course 1 you should have 
	finished course 0, and to take course 0 you should also have finished course 1. 
	So it is impossible.
 */

// [1,0] -> prerequisites[i][0] = 1,  prerequisites[i][0] = 0

public class Solution {
	public boolean canFinish(int numCourses, int[][] prerequisites) {
		List<List<Integer>> schedule = new ArrayList<List<Integer>>();
		for(int i=0; i < numCourses; i++){
			schedule.add(new ArrayList<Integer>());
		}
		int[] counter = new int[numCourses];
		for(int i = 0; i < prerequisites.length; i++){  // i < numCourses is wrong
			schedule.get(prerequisites[i][1]).add(prerequisites[i][0]);
			counter[prerequisites[i][0]]++;
		}
		for(int i = 0; i < numCourses; i++){
			int j;
			for(j = 0; j < numCourses; j++){
				if(counter[j] == 0){
					break;
				}
			}
			if(j == numCourses){
				return false;
			}
			for(int k: schedule.get(j)){
				counter[k]--;
			}
			counter[j] = -1;
		}
		return true;
	}
}
