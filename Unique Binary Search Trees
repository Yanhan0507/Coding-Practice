/*
  Given n, how many structurally unique BST's (binary search trees) that store values 1...n?
  
  For example,
  Given n = 3, there are a total of 5 unique BST's.
*/

public class Solution {

    // using 2D dimensional array 
    public int numTrees(int n) {
        int[][] M = new int[n][n];
        return numTrees(0, n-1, M);
    }
    
    public int numTrees(int start, int end, int[][] M){
        if(start >= end){   // pay attention this this trival statement, dont write like start <= end
            return 1;
        }
        if(M[start][end] != 0){
            return M[start][end];
        }
        int counter = 0;
        for(int i=start; i<=end; i++){
            counter += numTrees(start, i-1, M) * numTrees(i+1, end, M);
        }
        M[start][end] = counter;
        return M[start][end];
    }
    
    // another solution: using 1D array (based on the fact that the number of trees for 0-2 is the same as 2-4. 
    // so all of them can be considered as M[2])
    
    public int numTrees(int n) {
        int[] M = new int[n + 1];                  // M[0] stands for zero node int this subtree, M[1] stands for one node
        if(n == 0 || n == 1){
            return n;
        }
        M[0] = 1;
        M[1] = 1;
        for(int i=2; i<=n; i++){
            for(int j=0;j <=i-1;j++){                        // we used one node, so it's from 0 -> i-1
                M[i] += M[j]*M[i - j - 1];                   // remeber it is * rather than +,
            }
        }
        return M[n];
    }
}
