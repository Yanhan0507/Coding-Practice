/*
  Sort a linked list in O(n log n) time using constant space complexity.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode first = head;
        ListNode second = head.next;
        while(second != null && second.next != null){
            second = second.next.next;
            first = first.next;
        }
        second = first.next;
        first.next = null;                                          // dont forget that
        first = head;
        first = sortList(first);
        second = sortList(second);
        return merge(first, second);
    }
    
    public ListNode merge(ListNode l1, ListNode l2){
        ListNode dummy = new ListNode(-1);
        ListNode prev = dummy;
        while(l1 != null && l2 != null){
            if(l1.val < l2.val){
                prev.next = l1;
                l1 = l1.next;
                prev = prev.next;
            }
            else{
                prev.next = l2;
                l2 = l2.next;
                prev = prev.next;
            }
        }
        if(l1 == null){
            prev.next = l2;
        }
        else{
            prev.next = l1;
        }
        return dummy.next;
    }
}
