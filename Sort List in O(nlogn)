/*
  Sort a linked list in O(n log n) time using constant space complexity.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode dummy = new ListNode(-1);
        dummy.next = head;
        ListNode p1 = dummy;
        ListNode p2 = dummy;
        while(p2 != null && p2.next != null){
            p1 = p1.next;
            p2 = p2.next.next;
        }
        p2 = p1.next;
        p1.next = null;
        head = sortList(head);
        p2 = sortList(p2);
        return merge(head, p2);
    }
    
    public ListNode merge(ListNode n1, ListNode n2){
        if(n1 == null){
            return n2;
        }
        if(n2 == null){
            return n1;
        }
        ListNode dummy = new ListNode(-1);
        ListNode prev = dummy;
        while(n1 != null && n2 != null){
            if(n1.val < n2.val){
                prev.next = n1;
                n1 = n1.next;
                prev = prev.next;
            }
            else{
                prev.next = n2;
                n2 = n2.next;
                prev = prev.next;
            }
        }
        if(n1 == null){
            prev.next = n2;
        }
        else{
            prev.next = n1;
        }
        return dummy.next;
        
    }
}
