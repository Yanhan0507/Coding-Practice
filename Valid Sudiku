/*

Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.
The Sudoku board could be partially filled, where empty cells are filled with the character '.'.


*/

public class Solution {
    public boolean isValidSudoku(char[][] board) {
        if(board == null ||board.length != 9 || board[0].length != 9) return false;
        Set<Character> rowSet = new HashSet<Character>();
        Set<Character> colSet = new HashSet<Character>();
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[i].length; j++){
                                                                        // if(board[i][j] == '.'){
                                                                        //     continue;
                                                                        // }  is wrong. cuz board[i][j] and board[j][i] are different
                if(board[i][j] != '.' && !rowSet.add(board[i][j]) ){
                    return false;
                }
                if(board[j][i] != '.' && !colSet.add(board[j][i]) ){            // it should be square
                    return false;
                }
            }
            rowSet.clear();
            colSet.clear();
        }
        Set<Character> set = new HashSet<Character>();
        for(int i=0; i<3; i++){
            for(int j=0; j<3; j++){
                for(int m=3*i; m<3*i+3; m++){
                    for(int n=3*j; n<3*j+3; n++){
                        if(board[m][n] == '.'){
                            continue;
                        }
                        if(!set.add(board[m][n])){
                            return false;
                        }
                    }
                }
                set.clear();
            }
        }
        return true;
    }
}



