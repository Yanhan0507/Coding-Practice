
/*
 Given inorder and postorder traversal of a tree, construct the binary tree.

	Note:
	You may assume that duplicates do not exist in the tree.
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class Solution {
	public TreeNode buildTree(int[] inorder, int[] postorder) { 
        if(inorder.length == 0 || inorder.length != postorder.length){   // dont forget the corner case!
            return null;
        }
        return buildTree(inorder, postorder, 0, inorder.length-1, 0, postorder.length-1);
    }
    
    private TreeNode buildTree(int[] inorder, int[] postorder, int instart, 
    		int inend, int poststart, int postend){
    	if(instart > inend){
    		return null;
    	}
    	if(instart == inend){
    		TreeNode root = new TreeNode(inorder[instart]);
    		return root;
    	}
    	TreeNode root = new TreeNode(postorder[postend]);
    	int index = instart;
    	for(int i = instart; i <= inend; i++){
    		if( inorder[i] == postorder[postend]){
    			index = i;
    			break;
    		}
    	}

    	root.left = buildTree(inorder, postorder, instart, index - 1, 
    			poststart, poststart + index -1 -instart);
    	root.right = buildTree(inorder, postorder, index + 1, inend, 
    			poststart + index - instart, postend-1);
    	return root;
    }
}


