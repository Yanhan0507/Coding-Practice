/* 
	Given a binary tree, determine if it is a valid binary search tree (BST).
	Assume a BST is defined as follows:
	
	The left subtree of a node contains only nodes with keys less than the node's key.
	The right subtree of a node contains only nodes with keys greater than the node's key.
	Both the left and right subtrees must also be binary search trees.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 // using inorder traversal, the solution is simple but using O(n) + O(h) space
 
public class Solution {
    public boolean isValidBST(TreeNode root) {
        List<TreeNode> list = new ArrayList<TreeNode>();
        getList(list, root);
        for(int i=0; i<list.size() -1; i++){
            if(list.get(i).val >= list.get(i+1).val){
                return false;
            }
        }
        return true;
    }
    
    public void getList(List<TreeNode> list, TreeNode root){
        if(root == null){
            return;
        }
        getList(list, root.left);
        list.add(root);
        getList(list, root.right);
    }
}
