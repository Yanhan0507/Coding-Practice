/*
  Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.
  
  For example:
  Given the below binary tree and sum = 22,
                5
               / \
              4   8
             /   / \
            11  13  4
           /  \    / \
          7    2  5   1
  return
  [
     [5,4,11,2],
     [5,8,4,5]
  ]
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root == null){
            return result;                       // dont forget the corner case
        }
        pathSum(root, sum, new ArrayList<Integer>(), result);
        return result;
    }
    
    private void pathSum(TreeNode root, int sum, List<Integer> path, List<List<Integer>> result){
        path.add(root.val);
        sum -= root.val;
        if(root.left == null && root.right == null){
            if(sum == 0){
                result.add(new ArrayList<Integer>(path));
            }
            path.remove(path.size()-1);
            return;
        }
        if(root.left != null){
            pathSum(root.left, sum, path, result);
        }
        if(root.right != null){
            pathSum(root.right, sum, path, result);
        }
        path.remove(path.size()-1);
    }
}
