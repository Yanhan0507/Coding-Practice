/*
    Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.
    
    For example, given the following matrix:
    
    1 0 1 0 0
    1 0 1 1 1
    1 1 1 1 1
    1 0 0 1 0
    Return 4.
*/
public class Solution {
    
// optimal solution: using DP, m[i][j]: i,j as the right bottom side of the square, the maximal length we have
    public int maximalSquare(char[][] matrix){
        if(matrix.length == 0){
            return 0;
        }
        int max = 0;
        int[][] record = new int[matrix.length][matrix[0].length];
        for(int i = 0; i < matrix.length; i++){
            if(matrix[i][0] == '1'){
                record[i][0] = 1;
                max = 1;
            }
        }
        for(int i = 0; i < matrix[0].length; i++){
            if(matrix[0][i] == '1'){
                record[0][i] = 1;
                max = 1;
            }
        }
        
        for(int i = 1; i < matrix.length; i++){
            for(int j = 1; j < matrix[0].length; j++){
                // if it is 0, set the value to 0
                if(matrix[i][j] == '0'){
                    record[i][j] = 0;
                }
                // 3 neighbors are the same, so we can enlarge the length by 1
                else if(record[i-1][j] == record[i-1][j-1] && record[i-1][j-1] == record[i][j-1]){
                    record[i][j] = record[i-1][j] + 1;
                }
                // 3 neighbors are different, we can only enlarge the minimal length by 1
                else{
                    record[i][j] = Math.min(Math.min(record[i-1][j], record[i][j-1]), record[i-1][j-1])+1;
                }
                max = Math.max(max, record[i][j]);
            }
           
        }
        return max*max;
    }
    
    
    
    // brute force solution: 
    public int maximalSquare1(char[][] matrix) {
        int record = 0;
        for(int i=0;i<matrix.length;i++){
            for(int j = 0; j<matrix[0].length; j++){
                record = Math.max(record, findSquare(j,i,matrix));
            }
        }
        return record;
    }
    
    private int findSquare(int row, int column, char[][] matrix){
        int iterations = Math.min(matrix.length - column, matrix[0].length - row);
        int layer = 0;
        int record = 0;
        while(layer < iterations){
            boolean possible = true;
            for(int i = column; i <= column + layer; i++){
                if(!possible){
                    break;
                }
                for(int j =row; j <= row + layer; j++ ){
                    if(matrix[i][j] != '1'){
                        possible = false;
                        break;
                    }
                }
            }
            if(possible){
                record = layer + 1;
            }
            layer++;
        }
        return record*record;
    }
}
