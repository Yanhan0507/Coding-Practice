/*
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
*/

public class Solution {
    public boolean isPalindrome(int x) {
        if(x < 0){
            return false;
        }
    	int tmp = x;
    	int digits = 0;
    	int max = 1;
    	int min = 10;
    	int divide = 1;
    	while(tmp > 0){
    		digits++;
    		tmp /= 10;
    		if(tmp > 0){
    			max *= 10;
    		}
    	}
    	for(int i = 0; i < digits/2; i++){
    		int a = x/max%10;
    		int b = x%min/divide;
    		if(a != b){
    			return false;
    		}
    		max /= 10;
    		min *= 10;
    		divide *= 10;
    	}
    	return true;
    }
}


public class Solution {
    public boolean isPalindrome(int x) {
        if(x < 0){
            return false;
        }
        String target = "" + x;
        for(int i = 0; i < target.length()/2; i++){
        	if(target.charAt(i) != target.charAt(target.length() - 1 - i)){
        		return false;
        	}
        }
        return true;
    }
}
