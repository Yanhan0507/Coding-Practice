/*
  Given a linked list, swap every two adjacent nodes and return its head.
  
  For example,
  Given 1->2->3->4, you should return the list as 2->1->4->3.
  
  Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode newHead = new ListNode(-1);
        newHead.next = head;
        ListNode prev = newHead;
        ListNode n0 = head;
        while(n0 != null && n0.next != null){
            ListNode n1 = n0.next;
            ListNode rear = n1.next;
            prev.next = n1;
            n1.next = n0;
            n0.next = rear;
            n0 = rear;
            prev = n1.next;
        }
        return newHead.next;
    }
}
