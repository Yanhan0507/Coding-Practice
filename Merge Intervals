/*
  Given a collection of intervals, merge all overlapping intervals.
  
  For example,
  Given [1,3],[2,6],[8,10],[15,18],
  return [1,6],[8,10],[15,18].
*/

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        Collections.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval i1, Interval i2){
                if(i1.start < i2.start){
                    return -1;
                }
                else if(i1.start > i2.start){
                    return 1;
                }
                else{
                    return 0;
                }
            }
        });
        
        int i = 1;
        while(i < intervals.size()){
            Interval i1 = intervals.get(i - 1);
            Interval i2 = intervals.get(i);
            if(i2.start <= i1.end){
               i1.end = Math.max(i1.end, i2.end);
               intervals.remove(i);
            }
            else{
                i++;
            }
        }
        return intervals;
    }
}

//


/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        Collections.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval i1, Interval i2){
                if(i1.start < i2.start){
                    return -1;
                }
                else if(i1.start > i2.start){
                    return 1;
                }
                else{
                    return 0;
                }
            }
        });
        
        List<Interval> schedule = new ArrayList<Interval>();
        int i = 0;
        while(i < intervals.size()){
            int start = intervals.get(i).start;
            int end = intervals.get(i).end;
            i++;
            while(i < intervals.size()){
                if(intervals.get(i).start <= end){
                    end = Math.max(intervals.get(i).end, end);
                    i++;
                }
                else{
                    break;
                }
            }
            schedule.add(new Interval(start, end));
        }
        return schedule;
    }
    

}
