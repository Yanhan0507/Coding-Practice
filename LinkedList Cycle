/*
 Given a linked list, determine if it has a cycle in it.
 Follow up:â€¨ Can you solve it without using extra space?
*/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    // time efficient but not space efficient
    public boolean hasCycle1(ListNode head) {
        HashSet<ListNode> visited = new HashSet<ListNode>();
        while(head != null){
            if(!visited.add(head)){
                return true;
            }
            head = head.next;
        }
        return false;
    }
    // space efficient but not time efficient. If it has a loop, the faster one can finally catch up the slower one
    public boolean hasCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while(fast != null && fast.next !=null){
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow){
                return true;
            }
        }
        return false;
    }
}
