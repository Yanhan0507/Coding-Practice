/*
  Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
  
  You may assume no duplicates in the array.
  
  Here are few examples.
  [1,3,5,6], 5 → 2
  [1,3,5,6], 2 → 1
  [1,3,5,6], 7 → 4
  [1,3,5,6], 0 → 0
*/

public class Solution {
    public int searchInsert(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;
        int mid = (start + end)/2;
        while(start <= end){
            if(nums[mid] < target){
                start = mid + 1;
            }
            else if(nums[mid] > target){
                end = mid - 1;
            }
            else{
                return  mid;
            }
            mid = (start + end)/2;                                              // dont forget
        }
        return (start + end + 1)/2;
        //  if the nums array has more than one element, for the while condition:
        //  there must be a moment that end = start + 1. and then next moment end == start. array with one element will also            //  reach this state
        //  at this moment if target > nums[mid] start = mid + 1, end = mid
        //  (mid + mid + 1 + 1) / 2 = mid + 1, so we will inset the element after mid
        //  if target < nums[mid]  end = mid - 1 start = mid, (mid + mid - 1 + 1) / 2 = mid, so we will inset the element in            //  front of mid.
        // if there is only only one element: start + end + 1 = 0 + 1 
    }
}
