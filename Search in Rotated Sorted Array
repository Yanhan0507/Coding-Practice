/*
  Suppose a sorted array is rotated at some pivot unknown to you beforehand.
  
  (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
  
  You are given a target value to search. If found in the array return its index, otherwise return -1.
  
  You may assume no duplicate exists in the array.
*/

public class Solution {
    public int search(int[] nums, int target) {
        int index = findMinimum(nums);
        int a = search(nums, target, 0, index - 1);
        int b = search(nums, target, index, nums.length - 1);
        return a == -1? b:a;
    }
    
    private int search(int[] nums, int target, int start, int end){
        if(start > end){
            return -1;
        }
        int mid = (start + end)/2;
        if(nums[mid] == target){
            return mid;
        }
        else if(nums[mid] > target){
            end = mid - 1;
        }
        else{
            start = mid + 1;
        }
        return search(nums, target, start, end);
    }
    
    private int findMinimum(int[] nums){
        int start = 0;
        int end = nums.length - 1;
        while(start < end){
            int mid = (start + end)/2;
            if(nums[mid] < nums[end]){
                end = mid;
            }
            else{
                start = mid + 1;
            }
        }
        return start;
    }
}
