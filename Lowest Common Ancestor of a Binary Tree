
/*
Lowest Common Ancestor of a Binary Tree Total Accepted: 1843 Total Submissions: 6521 My Submissions Question Solution 
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as 
the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”

        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, 
since a node can be a descendant of itself according to the LCA definition.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        List<TreeNode> path = new ArrayList<TreeNode>();
        List<List<TreeNode>> result = new ArrayList<List<TreeNode>>();
        if(root == p || root == q){
            return root;
        }
        path.add(root);
        DFS(root, p, path, result);
        DFS(root, q, path, result);
        TreeNode returnValue = null;
        List<TreeNode> path1 = result.get(0);
        List<TreeNode> path2 = result.get(1);
        for(int i = 0; i < path1.size() && i < path2.size(); i++){
            if(path1.get(i) == path2.get(i)){
                returnValue = path1.get(i);
            }
        }
        return returnValue;
    }
    
    private void DFS(TreeNode root, TreeNode node, List<TreeNode> path, List<List<TreeNode>> result){
        if(root == null){
            return;
        }
        if(root == node){
            result.add(new ArrayList<TreeNode>(path));
            return;
        }
        path.add(root.left);
        DFS(root.left, node, path, result);
        path.remove(path.size() - 1);
        path.add(root.right);
        DFS(root.right, node, path, result);
        path.remove(path.size() - 1);
    }
}
