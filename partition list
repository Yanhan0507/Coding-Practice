/*
	Given a linked list and a value x, partition it such that all nodes less than x come 
	before nodes greater than or equal to x.

	You should preserve the original relative order of the nodes in each of the two partitions.

	For example,
	Given 1->4->3->2->5->2 and x = 3,
	return 1->2->2->4->3->5.
*/

public class Solution{

    public ListNode partition(ListNode head, int x) {
    	// this method is space efficient, but if more space is allowed, we can use two linked list
    	if(head == null){
    		return head;
    	}
        ListNode last = null;
        ListNode cur = head.next;
        ListNode prev = head;
        if(head.val < x){
        	last = head;
        }
        while(cur != null){
        	if(cur.val < x){
        		if(last == null){
        			last = cur;
        		}
        		prev.next = cur.next;
        		cur.next = head;
        		head = cur;
        		cur = prev.next;
        	}
        	else{
        		cur = cur.next;
        		prev = prev.next;
        	}
        }
        if(last == null){
        	return head;
        }
        ListNode connection2 = last.next;
        last.next = null;
        ListNode pre = null;
        cur = head;
        ListNode connection1 = head;
        while(head != null){
        	ListNode tmp = head.next;
        	head.next = prev;
        	prev = head;
        	head = tmp;
        }
        connection1.next = connection2;
        
        return prev;
    }
    
	// using o(N) space, but easy to implement
    public ListNode partition1(ListNode head, int x){
    	ListNode small = new ListNode(-1);
    	ListNode big = new ListNode(-1);
    	ListNode cur1 = small;
    	ListNode cur2 = big;
    	while(head != null){
    		if(head.val < x){
    			cur1.next = head;
    			cur1 = cur1.next;
    		}
    		else{
    			cur2.next = head;
    			cur2 = cur2.next;
    		}
			ListNode tmp = head.next;
			head.next = null;
			head = tmp;
    	}
    	if(cur1 == null){
    		return big.next;
    	}
    	else if(cur2 == null){
    		return small.next;
    	}
    	else{
    		cur1.next = big.next;
    		return small.next;
    	}
    }
	
	public void show(ListNode head){
		while(head != null){
			System.out.println(head.val);
			head = head.next;
		}
	}
	
	public static void main(String[] args){
		Solution s = new Solution();
		ListNode head = new ListNode(1);
		ListNode n1 = new ListNode(4);
		ListNode n2 = new ListNode(9);
		ListNode n3 = new ListNode(3);
		ListNode n4 = new ListNode(5);
		ListNode n5 = new ListNode(5);
		ListNode n6 = new ListNode(7);
		head.next = n1;
		n1.next = n2;
		n2.next = n3;
		n3.next = n4;
		n4.next = n5;
		n5.next = n6;
		n6.next = null;
		s.show(s.partition1(head, 0));
	}
}
