
/*
	Given a linked list, remove the nth node from the end of list and return its head.
	For example,
	
	Given linked list: 1->2->3->4->5, and n = 2.
	
	After removing the second node from the end, the linked list becomes 1->2->3->5.
	Note:
	Given n will always be valid.
	Try to do this in one pass.
*/
public class Solution{
	
	public ListNode removeNthFromEnd(ListNode head, int n) {
		if( n == 0){
			return head;
		}
		ListNode dummy = new ListNode(-1);
		dummy.next = head;
		ListNode cur = head;
		while( n > 1 ){
			n--;
			cur = cur.next;
			if(cur == null){
				return head;
			}
		}
		ListNode first = dummy;
		while(cur.next != null){
			cur = cur.next;
			first = first.next;
		}
		first.next = first.next.next;
		return dummy.next;
	}
	public void show(ListNode head){
		while(head != null){
			System.out.println(head.val);
			head = head.next;
		}
	}
	
	public static void main(String[] args){

		Solution s = new Solution();
		ListNode head = new ListNode(1);
		ListNode n1 = new ListNode(2);
		ListNode n2 = new ListNode(3);
		ListNode n3 = new ListNode(4);
		ListNode n4 = new ListNode(5);
		ListNode n5 = new ListNode(6);
		ListNode n6 = new ListNode(7);
		head.next = n1;
		n1.next = n2;
		n2.next = n3;
		n3.next = n4;
		n4.next = n5;
		n5.next = n6;
		n6.next = null;
		s.removeNthFromEnd(head, 2);
		s.show(head);
		
	}
}
