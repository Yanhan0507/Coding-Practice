/*
	Rotate an array of n elements to the right by k steps.
	
	For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].
	
	Note:
	Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
	
	[show hint]
	
	Related problem: Reverse Words in a String II
 */

public class Solution {
//  reverse the whole array, and then reverse both first part(0,k-1) 
//  and (k,nums.length-1) respectively
	
	public void rotate(int[] nums, int k) {
		k = k % nums.length;
		reverse(nums, 0, nums.length - 1);
		reverse(nums, 0, k-1);
		reverse(nums,k, nums.length -1);
		
	}
	
	public void reverse(int[] nums, int start, int end){
		while(start < end){
			int tmp = nums[start];
			nums[start] = nums[end];
			nums[end] = tmp;
			start ++;
			end --;
		}
	}
	
// brute force solution
    public void rotate1(int[] nums, int k) {
        while(k > 0){
        	k--;
        	shift1(nums);
        }
    }
    
    private void shift1(int[] nums){
    	int record = nums[nums.length - 1];
    	for(int i = nums.length-2; i>=0; i--){
    		nums[i+1] = nums[i];   // dont go in this way, i:0->n nums[i+1] = nums[i], 
    							   // thus everything will become nums[0
    	}
    	nums[0] = record;
    }
    
    private void show(int[] nums){
    	for(int i: nums){
    		System.out.println(i);
    	}
    }
    public static void main(String[] args){
    	Solution s = new Solution();
    	int[] values = new int[]{1,2,3,4,5,6,7};
    	s.rotate(values, 2);
    	s.show(values);
    }
    
    
    
    
}
