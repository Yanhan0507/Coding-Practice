/*
	Given a binary tree, flatten it to a linked list in-place.
	
	For example,
	Given
	
	         1
	        / \
	       2   5
	      / \   \
	     3   4   6
	The flattened tree should look like:
	   1
	    \
	     2
	      \
	       3
	        \
	         4
	          \
	           5
	            \
	             6
 */

// preOrder traversal

public class Solution {
    public void flatten(TreeNode root) {
        List<TreeNode> list = new ArrayList<TreeNode>();
        preOrder(list, root);
        TreeNode prev = root;
        TreeNode cur = root;
        for(int i = 1; i < list.size(); i++){
        	cur = list.get(i);
        	prev.right = cur;
        	prev.left = null;
        	cur = prev;
        }
    }
    
    private void preOrder(List<TreeNode> list, TreeNode root){
    	if(root == null){
    		return;
    	}
    	list.add(root);
    	preOrder(list, root.left);
    	preOrder(list, root.right);
    }
}


// in place solution

public class Solution {
    public void flatten(TreeNode root) {
    	if(root == null){
    		return;
    	}
    	flatten(root.left);
    	flatten(root.right);
    	TreeNode leftright = findRight(root.left);
    	if(leftright == null){
    		return;
    	}
    	leftright.right = root.right;
    	root.right = root.left;
    	root.left = null;
    	
    }
    
    private TreeNode findRight(TreeNode root){
    	if(root == null){
    		return null;
    	}
    	while(root.right != null){
    		root = root.right;
    	}
    	return root;
    }
}
