/*
  Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.
  
  For example, given the following triangle
  [
       [2],
      [3,4],
     [6,5,7],
    [4,1,8,3]
  ]
  The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).
  
  Note:
  Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.
*/


public class Solution {
// using O(N^2) space + O(N) stack space, and O(N^2) time
    public int minimumTotal(List<List<Integer>> triangle) {
        Integer[][] M = new Integer[triangle.size()][triangle.size()];
        return minimumTotal(triangle, M, 0, 0, 0);
    }
    private int minimumTotal(List<List<Integer>> triangle, Integer[][] M, int row, int column, int sum){
        if(row == triangle.size()){
            return 0;
        }
        if(M[row][column] != null){
            return M[row][column];
        }
        int val = triangle.get(row).get(column);
        M[row][column] = triangle.get(row).get(column) 
        + Math.min(minimumTotal(triangle, M, row+1, column, sum+val), minimumTotal(triangle, M, row+1, column+1, sum+val) );
        return M[row][column];
    }
}
// using O(n) space and O(n^2) time
    public int minimumTotal1(List<List<Integer>> triangle) {
        List<Integer> result = new ArrayList<Integer>();
        int size = triangle.size() - 1;
        for(int i=0; i<=size; i++){
           result.add(triangle.get(size).get(i));
        }
        for(int i = triangle.size() - 2; i >= 0; i--){
            for(int j = 0; j <= i; j++){
                int val = triangle.get(i).get(j);
                val += Math.min(result.get(j), result.get(j+1));
                result.set(j, val);
            }
        }
        return result.get(0);
    }
    
    
// brute force: expoential time but O(N) stack space
// public class Solution {
//     int path = Integer.MAX_VALUE;
//     public int minimumTotal(List<List<Integer>> triangle) {
//         minimumTotal(triangle, 0, 0, 0);
//         return path;
//     }
//     private void minimumTotal(List<List<Integer>> triangle, int row, int column, int sum) {
//         if(row == triangle.size()){
//             if(sum < path){
//                 path = sum;
//             }
//             return;
//         }
//         List<Integer> list = triangle.get(row);
//         minimumTotal(triangle, row+1, column, sum+list.get(column));
//         minimumTotal(triangle, row+1, column + 1, sum+list.get(column));
//     }
// }
