/*
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
*/

public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        comb(result, new ArrayList<Integer>(), n, 1, k);
        return result;
    }
    
    private void comb(List result, List<Integer> path, int n, int level, int k){

    	if(k == 0){
    		result.add(new ArrayList<Integer>(path));
    		return;
    	}
    	if(n < level){
    		return;
    	}
    	comb(result, path, n, level + 1, k);
    	path.add(level);
    	comb(result, path, n, level + 1 , k-1);
    	path.remove(path.size() - 1);
    }
}
