
/*
	Given a string containing only digits, restore it by returning all possible 
	valid IP address combinations.
	
	For example:
	Given "25525511135",
	
	return ["255.255.11.135", "255.255.111.35"]. (Order does not matter)
	1, 00 is illegal; 10,0 is legal
*/

public class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> result = new ArrayList<String>();
        if(s.length() == 0 ){                     // remove unnecessary computation
        	return result;
        }

        helper(result, 0, 0, new StringBuilder(), s);
        return result;
    }
    
    public void helper(List<String> result, int level, int index, StringBuilder tmp, String target){
    	if(level == 4 ){
    		if(index == target.length()){
    			result.add(tmp.substring(0, tmp.length()-1));  	// remove the last "."
    		}
    		else{
    			return;
    		}
    				 
    	}
    	for(int i = 0; i < 3 && index + i <target.length(); i++){
    		if(isValid(target.substring(index, index + i + 1))){
    			tmp.append(target.substring(index, index + i + 1) + ".");
    			helper(result, level+1, index + i + 1, tmp, target);
    			tmp.delete(tmp.length() - 1 - i - 1, tmp.length());  
    			                                                   // like the substring, delete does not include the last index
    		}
    	}
    }
    
    public boolean isValid(String s){
    	if(s.length() == 1){
    		return true;
    	}
    	else if(s.length() == 2){
    		return s.charAt(0) != '0';
    	}
    	else if(s.length() == 3){
    		return s.charAt(0) != '0' && Integer.valueOf(s)<=255;
    	}
    	return false;
    
    }
}
