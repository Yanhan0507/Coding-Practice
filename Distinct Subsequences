/*
  Given a string S and a string T, count the number of distinct subsequences of T in S.
  
  A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).
  
  Here is an example:
  S = "rabbbit", T = "rabbit"
  
  Return 3.
*/
public class Solution {
    public int numDistinct(String s, String t) {
        int[][] M = new int[s.length() + 1][t.length() + 1];
        for(int i = 0; i <= s.length(); i++){
            M[i][0] = 1;
        }
        for(int i = 1; i < M.length; i++){
            for(int j = 1; j < M[i].length; j++){
                if(s.charAt(i-1) == t.charAt(j-1)){
                    M[i][j] = M[i-1][j-1] + M[i-1][j];
                }
                else{
                    M[i][j] = M[i-1][j];
                }
            }
        }
        return M[M.length - 1][M[0].length - 1];
    }
}
