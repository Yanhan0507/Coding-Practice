/*
  Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.
  
  
  OJ's undirected graph serialization:
  Nodes are labeled uniquely.
  
  We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
  As an example, consider the serialized graph {0,1,2#1,2#2,2}.
  
  The graph has a total of three nodes, and therefore contains three parts as separated by #.
  
  First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
  Second node is labeled as 1. Connect node 1 to node 2.
  Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
  Visually, the graph looks like the following:
  
         1
        / \
       /   \
      0 --- 2
           / \
           \_/
*/

// using a map to record the created nodes

/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if(node == null){
            return null;
        }
        Map<Integer, UndirectedGraphNode> map = new HashMap<Integer, UndirectedGraphNode>();
        Set<UndirectedGraphNode> marked = new HashSet<UndirectedGraphNode>();
        Queue<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();
        queue.add(node);
        marked.add(node);
        UndirectedGraphNode newRoot = new UndirectedGraphNode(node.label);
        map.put(node.label, newRoot);
        while(!queue.isEmpty()){
            Queue<UndirectedGraphNode> tmpQueue = new LinkedList<UndirectedGraphNode>();
            while(!queue.isEmpty()){
                UndirectedGraphNode tmpNode = queue.poll();
                UndirectedGraphNode curNode = map.get(tmpNode.label);
                List<UndirectedGraphNode> list = tmpNode.neighbors;
                for(UndirectedGraphNode tmp: list){
                    UndirectedGraphNode linkedNode;
                    if(map.containsKey(tmp.label)){
                        linkedNode = map.get(tmp.label);
                    }
                    else{
                        linkedNode = new UndirectedGraphNode(tmp.label);
                        map.put(linkedNode.label, linkedNode);
                    }
                    curNode.neighbors.add(linkedNode);
                    if(marked.add(tmp)){
                        tmpQueue.add(tmp);
                    }
                }
            }
            queue = tmpQueue;
        }
        return map.get(node.label);
        
    }
}
