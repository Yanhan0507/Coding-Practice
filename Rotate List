/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
 /*
     Given a list, rotate the list to the right by k places, where k is non-negative.
    
    For example:
    Given 1->2->3->4->5->NULL and k = 2,
    return 4->5->1->2->3->NULL.
 */
 // O(n), IF k > length, k = k % length. and k = 0 means we dont need to switch it, so it can be a corner case
public class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null){
            return head;
        }
        int length = 0;
        ListNode tmp = head;
        while(tmp!=null){
            length++;
            tmp = tmp.next;
        }
        k = k % length;
        if(k == 0){
            return head;
        }
        ListNode first = head;
        ListNode second = head;
        while(k > 0){
            k--;
            second = second.next;
        }
        while(second.next != null){
            second = second.next;
            first = first.next;
        }
        ListNode newHead = first.next;
        first.next = null;
        second.next = head;
        return newHead;
    }
}
