/*
  Given a collection of candidate numbers (C) and a target number (T), find all unique combinations 
  in C where the candidate numbers sums to T.
  
  Each number in C may only be used once in the combination.
  
  Note:
  All numbers (including target) will be positive integers.
  Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
  The solution set must not contain duplicate combinations.
  For example, given candidate set 10,1,2,7,6,1,5 and target 8, 
  A solution set is: 
  [1, 7] 
  [1, 2, 5] 
  [2, 6] 
  [1, 1, 6] 
*/

// necessary to use set: [1,1] 1 -> [1] , [1] but actually we only want one [1]

public class Solution {
   public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        Set<List<Integer>> result = new HashSet<List<Integer>>();
        combinationSum2(candidates, target, 0, result, new ArrayList<Integer>());
        return new ArrayList<List<Integer>>(result);
    }
    
    private void combinationSum2(int[] candidates, int target, int start, 
    Set<List<Integer>> result, List<Integer> path){
        if(target == 0){
            result.add(new ArrayList<Integer>(path));
            return;
        }
        for(int i = start; i < candidates.length; i++){
            if(target - candidates[i] < 0){
                break;
            }
            path.add(candidates[i]);
            combinationSum2(candidates, target - candidates[i], i + 1, result, path);
            path.remove(path.size() - 1);
        }
    }
}



// Solution 2, dont use set
// every time, we dont put duplicate elements
// 有序添加 比如 1 1 1， 1， 1，1， 1，1，1 都会被加入， 但是不会有1，＊，1或者 ＊1， 1相同元素只有可能刚开始被加入
// 所以是有序添加 没有重复
public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        combinationSum(candidates, target, result, new ArrayList<Integer>(), 0);
        return result;
    }

    private void combinationSum(int[] candidates, int target, List<List<Integer>> result, List<Integer> path, int index) {
        if(target == 0){
            result.add(new ArrayList<Integer>(path));
            return;
        }
        for(int i = index; i < candidates.length && candidates[i] <= target ; i++){
            if(i == index || candidates[i] != candidates[i-1]){
                path.add(candidates[i]);
                combinationSum(candidates, target - candidates[i], result, path, i + 1);
                path.remove(path.size() - 1);
            }
        }
    }
}
