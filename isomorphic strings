public class Solution {
/*
  Given two strings s and t, determine if they are isomorphic.
  
  Two strings are isomorphic if the characters in s can be replaced to get t.
  
  All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.
  
  For example,
  Given "egg", "add", return true.
  
  Given "foo", "bar", return false.
  
  Given "paper", "title", return true.
  
  Note:
  You may assume both s and t have the same length.
*/

// unluckily, we need to initialization the char[] map, and in this case, 
// if the s and t has the space, then the method will not work well;

    public boolean isIsomorphic(String s, String t) {
        char[] map = new char[255];
        int[] used = new int[255];
        for(int i = 0; i < 255; i++){
            map[i] = '';
        }
        if(s.length() != t.length()){
            return false;
        }
        
        for(int i = 0; i < s.length(); i++){
            if(map[s.charAt(i)] == ' '){
                if(used[t.charAt(i)] == 1){
                    return false;
                }
                map[s.charAt(i)] = t.charAt(i);
                used[t.charAt(i)] = 1;
            }
            else{
                char ch = map[s.charAt(i)];
                if(ch != t.charAt(i)){
                    return false;
                }
            }
        }
        return true;
    }
}
