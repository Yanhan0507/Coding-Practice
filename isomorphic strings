public class Solution {
/*
  Given two strings s and t, determine if they are isomorphic.
  
  Two strings are isomorphic if the characters in s can be replaced to get t.
  
  All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.
  
  For example,
  Given "egg", "add", return true.
  
  Given "foo", "bar", return false.
  
  Given "paper", "title", return true.
  
  Note:
  You may assume both s and t have the same length.
*/

// remember to used a set so that no element has been mapped to twice

 public boolean isIsomorphic(String s, String t) {
        Map<Character, Character> map = new HashMap<Character, Character>(s.length());
        Set<Character> used = new HashSet<Character>(s.length());
        
        for(int i=0; i<s.length(); i++){
            if( !map.containsKey(s.charAt(i)) ){
                if(used.contains(t.charAt(i))){
                        return false;
                }
                used.add(t.charAt(i));
                map.put(s.charAt(i), t.charAt(i));
            }
            else{
                  char ch = map.get(s.charAt(i));
                  if(ch != t.charAt(i)){
                      return false;
                  }
            }
        }
        return true;
    }

// unluckily, we need to initialize the char[] map, and thus, the method below may not work well in some cases 
// if the s and t has the space element(' '), then the method will not work well;

    public boolean isIsomorphic1(String s, String t) {
        char[] map = new char[255];
        int[] used = new int[255];
        for(int i = 0; i < 255; i++){
            map[i] = '';
        }
        if(s.length() != t.length()){
            return false;
        }
        
        for(int i = 0; i < s.length(); i++){
            if(map[s.charAt(i)] == ' '){
                if(used[t.charAt(i)] == 1){
                    return false;
                }
                map[s.charAt(i)] = t.charAt(i);
                used[t.charAt(i)] = 1;
            }
            else{
                char ch = map[s.charAt(i)];
                if(ch != t.charAt(i)){
                    return false;
                }
            }
        }
        return true;
    }
}
