/*
  Find the kth largest element in an unsorted array. Note that it is 
  the kth largest element in the sorted order, not the kth distinct element.
  
  For example,
  Given [3,2,1,5,6,4] and k = 2, return 5.
  
  Note: 
  You may assume k is always valid, 1 ≤ k ≤ array's length.
*/
public class Solution {
    
    // the pq size should be k+1, cuz we cannot do anything if the size of pq is k.
    // if we delete one thing in k elements' pq, then add a new element which is smaller than
    // the rest of elements. It will lead to error
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k + 1);
        for(int i = 0; i < nums.length; i++){
            pq.add(nums[i]);
            if(pq.size() == k + 1){
                pq.poll();
            }
   
        }
        return pq.peek();
    }
}
// try quick select solution
