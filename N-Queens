/*
The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.



Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:
*/
public class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        helper(result, new ArrayList<Integer>(), n);
        List<List<String>> res = new ArrayList<List<String>>();
        for(List<Integer> list: result){
            List<String> ans = new ArrayList<String>();
            for(int i = 0; i < list.size(); i++){
                String str = build(list.get(i), n);
                ans.add(str);
            }
            res.add(ans);
        }
        return res;
    }
    
    private void helper(List<List<Integer>> result, List<Integer> path, int n){
        if(path.size() == n){
            result.add(new ArrayList<Integer>(path));
            return;
        }
        for(int i = 0; i < n; i++){
            path.add(i);
            if(valid(path)){
                helper(result, path, n);
            }
            path.remove(path.size() - 1);
        }
    }
    
    private boolean valid(List<Integer> path){
        if(path.size() == 0){
            return true;
        }
        Set<Integer> set = new HashSet<Integer>();
        for(int i = 0; i < path.size(); i++){
            int tmp = path.get(i);
            if(!set.add(tmp)){
                return false;
            }
        }
        for(int i = 0; i < path.size(); i++){
            int x1 = i;
            int y1 = path.get(i);
            for(int j = i + 1; j < path.size(); j++){
                int x2 = j;
                int y2 = path.get(j);
                int difX = Math.abs(x1 - x2);
                int difY = Math.abs(y1 - y2);
                if(difX == difY){
                    return false;
                }
            }
        }
        return true;
    }
    
    private String build(int k, int n){
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < n; i++){
            if(i == k){
                sb.append('Q');
            }
            else{
                sb.append('.');
            }
        }
        return sb.toString();
    }
}
