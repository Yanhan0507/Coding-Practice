/*
  Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).
  
  For example:
  Given binary tree {3,9,20,#,#,15,7},
      3
     / \
    9  20
      /  \
     15   7
  return its zigzag level order traversal as:
  [
    [3],
    [20,9],
    [15,7]
  ]
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Stack<TreeNode> stack = new Stack<TreeNode>();
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root == null){
            return result;
        }
        boolean leftright = true;
        stack.push(root);
        while(!stack.empty()){
            Stack<TreeNode> tmp = new Stack<TreeNode>();
            List<Integer> list = new ArrayList<Integer>();
            while(!stack.empty()){
                TreeNode t = stack.pop();
                list.add(t.val);
                if(leftright){
                    if(t.left != null){
                        tmp.push(t.left);
                    }
                    if(t.right != null){
                        tmp.push(t.right);
                    }
                }
                else{
                    if(t.right != null){
                        tmp.push(t.right);
                    }
                    if(t.left != null){
                        tmp.push(t.left);
                    }
                }
            }
            result.add(list);
            leftright = !leftright;
            stack = tmp;
        }
        return result;
        
    }
}
