/*
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

For example, given s = "aab",
Return

  [
    ["aa","b"],
    ["a","a","b"]
  ]
*/
public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<List<String>>();
        boolean[][] M = new boolean[s.length()][s.length()];
        for(int i = M.length - 1; i >= 0; i--){
            for(int j = i; j < M[i].length; j++){
                if(i == j){
                    M[i][j] = true;
                }
                else if(j - i == 1){
                    M[i][j] = s.charAt(i) == s.charAt(j);
                }
                else{
                    M[i][j] = M[i+1][j-1] && s.charAt(i) == s.charAt(j);
                }
            }
        }
        buildSolution(s, result, 0, new ArrayList<String>(), M);
        return result;
    }
    
    private void buildSolution(String s, List<List<String>> result, int level, List<String> path, boolean[][] M){
        if(level == s.length()){
            result.add(new ArrayList<String>(path));
            return;
        }
        for(int i = level; i < s.length(); i++){
            if(M[level][i]){
                String str = s.substring(level, i+1);
                path.add(str);
                buildSolution(s, result, i + 1, path, M);
                path.remove(path.size() - 1);
            }
        }
    }
}
