/* 
    Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

	For example, given n = 3, a solution set is:

	"((()))", "(()())", "(())()", "()(())", "()()()"	  
*/

public class Solution {
     public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<String>();
        helper(n, n, new StringBuilder(), result);
        return result;
    }
    
    public void helper(int left, int right, StringBuilder tmp, List<String> result){
    	if(left < 0 || right <0){
    		return;
    	}
    	if(left == 0 && right == 0){
    		result.add(tmp.toString());
    		return;
    	}
    	
    	if(left == right){
    		tmp.append("(");
    		helper(left - 1, right, tmp, result);
    		tmp.deleteCharAt(tmp.length()-1);               // dont forget backtrace here. (())(  -> ()
    		return;
    	}
    	else if(left < right){
    		tmp.append("(");
    		helper(left - 1, right, tmp, result);
    		tmp.deleteCharAt(tmp.length() - 1);
    		
    		tmp.append(")");
    		helper(left, right - 1, tmp, result);
    		tmp.deleteCharAt(tmp.length() - 1);
    	}
    	
    }
}
	
	
	
	
	
	
	
	

