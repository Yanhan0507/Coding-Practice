/*
  Find all possible combinations of k numbers that add up to a number n, 
  given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.
  
  Ensure that numbers within the set are sorted in ascending order.
  
  
  Example 1:
  
  Input: k = 3, n = 7
  
  Output:
  
  [[1,2,4]]
  
  Example 2:
  
  Input: k = 3, n = 9
  
  Output:
  
  [[1,2,6], [1,3,5], [2,3,4]]
*/

// this three questions are actually very good practice for interview
public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] nums= {1, 2, 3, 4, 5, 6, 7, 8, 9};
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        combinationSum3(nums, result, new ArrayList<Integer>(), k, 0, n);
        return result;
    }
    
    private void combinationSum3(int[] nums, List result, List path, int level, int index, int target){
        if(level == 0){
            if(target == 0){
                result.add(new ArrayList<Integer>(path));
            }
            return;
        }
        if(index == nums.length){
            return;
        }
        combinationSum3(nums, result, path, level, index + 1, target);
        path.add(nums[index]);
        combinationSum3(nums, result, path, level - 1, index + 1, target - nums[index]);
        path.remove(path.size() - 1);
    }
}
