// A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
// Return a deep copy of the list.

/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        HashMap<RandomListNode, RandomListNode> map = new HashMap<RandomListNode, RandomListNode>();
        
        RandomListNode cur = head;
        RandomListNode dummy = new RandomListNode(-1);
        RandomListNode prev = dummy;
        while(cur != null){
            RandomListNode node = new RandomListNode(cur.label);
            prev.next = node;
            prev = node;
            map.put(cur, node);
            cur = cur.next;
        }
        
        cur = head;
        while(cur != null){
            if(cur.random == null){
                map.get(cur).random = null;
            }
            else{
                map.get(cur).random = map.get(cur.random);
            }
            cur = cur.next;
        }
        
        return dummy.next;
    }
}
