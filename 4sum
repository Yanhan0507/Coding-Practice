// HashMap Solution
// if two pairs use the same index, we need to rejct this solution  (1, 3) (1, 4) both of them use index 1.

public class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Map<Integer, List<List<Integer>>> map = new HashMap<Integer, List<List<Integer>>>();
        for(int i = 0; i < nums.length; i++){
            for(int j = i+1; j < nums.length; j++){
                int val1 = nums[i];
                int val2 = nums[j];
                int key = val1 + val2;
                List<Integer> list = new ArrayList<Integer>();
                list.add(i);
                list.add(j);
                if(map.containsKey(key)){
                    map.get(key).add(list);
                }
                else{
                    List<List<Integer>> tmp = new ArrayList<List<Integer>>();
                    tmp.add(list);
                    map.put(key, tmp);
                }
            }
        }
        Set<List<Integer>> result = new HashSet<List<Integer>>();
        Set<Integer> set = map.keySet();
        for(int i: set){
            int value = target - i;
            if(map.containsKey(value)){
                result.addAll(buildSolution(map.get(value), map.get(i), nums));
            }
        }
        return new ArrayList<List<Integer>>(result);
    }
    
    private Set<List<Integer>> buildSolution(List<List<Integer>> list1, List<List<Integer>> list2, int[] nums){
        Set<List<Integer>> result = new HashSet<List<Integer>>();
        for(List<Integer> tmp1: list1){
            for(List<Integer> tmp2: list2){
                if(isValid(tmp1, tmp2)){
                    List<Integer> tmp = new ArrayList<Integer>();
                    tmp.add(nums[tmp1.get(0)]);
                    tmp.add(nums[tmp1.get(1)]);
                    tmp.add(nums[tmp2.get(0)]);
                    tmp.add(nums[tmp2.get(1)]);
                    Collections.sort(tmp);
                    result.add(tmp);
                }
            }
        }
        return result;
    }
    
    
    private boolean isValid(List<Integer> l1, List<Integer> l2){
        int x1 = l1.get(0), x2 = l1.get(1);
        int y1 = l2.get(0), y2 = l2.get(1);
        return x1 != y1 && x1 != y2 && x2 != y1 && x2 != y2;
    }
    
}
// O(n^3) solution
public class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        Set<List<Integer>> set = new HashSet<List<Integer>>();
        for(int i = 0; i <= nums.length - 4; i++){    // make sure last time is [length-4]+[length-3]+[length-2]+[length-1]
            for(int j = i+1; j <= nums.length - 3; j++){
                int start = j + 1;
                int end = nums.length - 1;
                int value = target - nums[i] - nums[j];
                while(start < end){
                    if(nums[start] + nums[end] == value){
                        List<Integer> list = new ArrayList<Integer>();
                        list.add(nums[i]);
                        list.add(nums[j]);
                        list.add(nums[start]);
                        list.add(nums[end]);
                        set.add(list);
                        end--;  
                        start++;         //    start++/end-- is equivalent here. Cuz it's combination
                                         //    in other words, if nums[start] + nums[end] == value both nums[start]
                                         //    and nums[end] should be changed together so that we can possible find one more 
                                         //    solution. In this sense, start++/end--/star++ and end-- all work fine here
                    }
                    else if(nums[start] + nums[end] > value){
                        end--;
                    }
                    else{
                        start++;
                    }
                }
            }
        }
        return new ArrayList<List<Integer>>(set);
    }
}


