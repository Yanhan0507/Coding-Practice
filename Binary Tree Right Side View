/*
	Given a binary tree, imagine yourself standing on the right side of it, 
	return the values of the nodes you can see ordered from top to bottom.

			For example:
			Given the following binary tree,
			   1            <---
			 /   \
			2     3         <---
			 \     \
			  5     4       <---
			You should return [1, 3, 4].
*/


// DFS
public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        DFS(result, root, 0);
        return result;
    }
    
    private void DFS(List<Integer> result, TreeNode root, int level){
    	if(root == null){
    		return;
    	}
    	if(level >= result.size()){
    		result.add(root.val);
    	}
    	DFS(result, root.right, level + 1);
    	DFS(result, root.left, level + 1);
    }
}

// BFS
public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        if(root == null){
        	return result;
        }
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        while(!queue.isEmpty()){
        	Queue<TreeNode> tmpQueue = new LinkedList<TreeNode>();
        	result.add(queue.peek().val);
        	while(!queue.isEmpty()){
        		TreeNode tmp = queue.poll();
        		if(tmp.right != null){
        			tmpQueue.add(tmp.right);
        		}
        		if(tmp.left != null){
        			tmpQueue.add(tmp.left);
        		}
        	}
        	queue = tmpQueue;
        }
        return result;
    }
}
