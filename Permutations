/*
    Given a collection of numbers, return all possible permutations.
    
    For example,
    [1,2,3] have the following permutations:
    [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].
*/

public class Solution {
    // every time we change the first element
    // remember to put array elements to list at first
    public List<List<Integer>> permute(int[] nums) {
        List<Integer > path = new ArrayList<Integer>();
        for(int i: nums){
            path.add(i);
        }
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        permute(result, path, 0);
        return result;
    }
    
    private void permute(List result, List path, int level){
        if(level == path.size()){
            result.add(new ArrayList<Integer>(path));
            return;
        }
        for(int i = level; i < path.size(); i++){
            swap(level, i, path);
            permute(result, path, level+1);
            swap(level, i, path);
        }
    }
    
    private void swap(int i, int j, List<Integer> path){
        int tmp = path.get(i);
        path.set(i, path.get(j));
        path.set(j, tmp);
    }
    
}
