/*
	Find the contiguous subarray within an array (containing at least one number) 
	which has the largest product.
	
	For example, given the array [2,3,-2,4],
	the contiguous subarray [2,3] has the largest product = 6.
*/

// the max always come from 3 candidates, curMax*nums[i], curMin*nums[i], nums[i]
public class Solution {
    public int maxProduct(int[] nums) {
        int max = Integer.MIN_VALUE;
        int curMax = 1;
        int curMin = 1;
        for(int i = 0; i < nums.length; i++){
        	if(nums[i] < 0){
        		int tmp = curMin;
        		curMin = Math.min(curMax*nums[i], nums[i]);
        		curMax = Math.max(tmp*nums[i], nums[i]);
        	}
        	else{
        		curMin = Math.min(curMin*nums[i], nums[i]);
        		curMax = Math.max(curMax*nums[i], nums[i]);
        	}
        	if(curMax > max){
        		max = curMax;
        	}
        }
        return  max;
    }
}
