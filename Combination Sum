/*
  Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.
  
  The same repeated number may be chosen from C unlimited number of times.
  
  Note:
  All numbers (including target) will be positive integers.
  Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
  The solution set must not contain duplicate combinations.
  For example, given candidate set 2,3,6,7 and target 7, 
  A solution set is: 
  [7] 
  [2, 2, 3] 
*/

// DFS Solution
public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        combinationSum(candidates, result, new ArrayList<Integer>(), 0, target);
        return result;
    }
    private void combinationSum(int[] candidates, List<List<Integer>> result, List<Integer> path, int start, int target){
        if(target == 0){
            result.add(new ArrayList<Integer>(path));
            return;
        } 
        for(int i = start; i < candidates.length; i++){
            if(target - candidates[i] < 0){
                break;
            }
            path.add(candidates[i]);
            combinationSum(candidates, result, path, i, target - candidates[i]);
            path.remove(path.size() - 1);
        }
    }
}

// another solution: like the solution regarding making changes for money
public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        combinationSum(candidates, result, new ArrayList<Integer>(), target, 0);
        return result;
    }
    
    private void combinationSum(int[] candidates, List<List<Integer>> result, List<Integer> list, int target, int level){
        if(level == candidates.length && target == 0){
            result.add(new ArrayList<Integer>(list));
            return;
        }
        if(level == candidates.length){
            return;
        }
        
        combinationSum(candidates, result, list, target, level + 1);
        int counter = 0;
        while(target - candidates[level] >= 0){
            counter ++;
            target -= candidates[level];
            list.add(candidates[level]);
            combinationSum(candidates, result, list, target, level + 1);
        }
        while(counter > 0){
            list.remove(list.size() - 1);
            counter--;
        }
    }
}
