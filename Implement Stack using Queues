class MyStack {

/*
  Implement the following operations of a stack using queues.
  
  push(x) -- Push element x onto stack.
  pop() -- Removes the element on top of the stack.
  top() -- Get the top element.
  empty() -- Return whether the stack is empty.
  Notes:
  You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
  Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
  You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).
  Update (2015-06-11):
  The class name of the Java function had been updated to MyStack instead of Stack.
*/
    // Push element x onto stack.
    LinkedList<Integer> queue1 = new LinkedList<Integer>();
    LinkedList<Integer> queue2 = new LinkedList<Integer>();
    public void push(int x) {
        queue1.add(x);
    }

    // Removes the element on top of the stack.
    public void pop() {
        int last = queue1.poll();
        while(!queue1.isEmpty()){
            queue2.add(last);
            last = queue1.poll();
        }
        LinkedList<Integer> tmp = queue1;
        queue1 = queue2;
        queue2 = tmp; 
    }

    // Get the top element.
    public int top() {
        int last = queue1.poll();
        while(!queue1.isEmpty()){
            queue2.add(last);
            last = queue1.poll();
        }
        queue2.add(last);
        LinkedList<Integer> tmp = queue1;
        queue1 = queue2;
        queue2 = tmp; 
        return last;
    }
    

    // Return whether the stack is empty.
    public boolean empty() {
        return queue1.isEmpty() && queue2.isEmpty();
    }
}
