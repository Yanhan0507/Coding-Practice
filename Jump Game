/*
	Given an array of non-negative integers, you are initially positioned at the first index of the array.

	Each element in the array represents your maximum jump length at that position.

	Determine if you are able to reach the last index.

	For example:
	A = [2,3,1,1,4], return true.

	A = [3,2,1,0,4], return false.
*/

public class Solution {
	
	// every time we record
	 public boolean canJump(int[] nums) {
		 int cur = 1;
		 for(int i = 0; i < nums.length; i++){
			 cur--;
			 cur = Math.max(cur, nums[i]);
			 if( i!=nums.length - 1 && cur == 0 ){
				 return false;
			 }
		 }
		 return true;
	 }
	// DP solution: using O(n) space
	public boolean canJump1(int[] nums) {
		if(nums.length == 0){
			return false;
		}
		boolean[] record = new boolean[nums.length];
		record[0] = true;
		for(int i = 0; i < nums.length; i ++){
			if(record[i]){
				for(int j = i; j < nums.length && j <= i + nums[i]; j++){
					record[i] = true;
				}
			}
		}
		return record[nums.length - 1];
    }
}
