/*
  Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.
  
  A region is captured by flipping all 'O's into 'X's in that surrounded region.
  
  For example,
  X X X X
  X O O X
  X X O X
  X O X X
  After running your function, the board should be:
  
  X X X X
  X X X X
  X X X X
  X O X X
*/
public class Solution {
    public void solve(char[][] board) {
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] == 'O'){
                    helper(board, i, j);
                }
            }
        }
        
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[i].length; j++){
                if(board[i][j] == '1'){
                    board[i][j] = 'O';
                }
            }
        }
    }
    
    private void helper(char[][] board, int i, int j){
        boolean surrounded = true;
        boolean[][] marked = new boolean[board.length][board[0].length];
        List<Integer> listX = new ArrayList<Integer>();
        List<Integer> listY = new ArrayList<Integer>();
        Queue<Integer> queueX = new LinkedList<Integer>();
        Queue<Integer> queueY = new LinkedList<Integer>();
        queueX.add(i);
        queueY.add(j);
        marked[i][j] = true;
        while(!queueX.isEmpty()){
            Queue<Integer> tmpQueueX = new LinkedList<Integer>();
            Queue<Integer> tmpQueueY = new LinkedList<Integer>();
            while(!queueX.isEmpty()){
                int x = queueX.poll();
                int y = queueY.poll();
                if(atBoundary(x,y,board)){
                    surrounded = false;
                }
                listX.add(x);
                listY.add(y);
            
                if(ableToVisit(x-1, y, marked, board)){
                    tmpQueueX.add(x-1);
                    tmpQueueY.add(y);
                    marked[x-1][y] = true;
                }
                if(ableToVisit(x+1, y, marked, board)){
                    tmpQueueX.add(x+1);
                    tmpQueueY.add(y);
                    marked[x+1][y] = true;
                }
                if(ableToVisit(x, y-1, marked, board)){
                    tmpQueueX.add(x);
                    tmpQueueY.add(y-1);
                    marked[x][y-1] = true;
                }
                if(ableToVisit(x, y+1, marked, board)){
                    tmpQueueX.add(x);
                    tmpQueueY.add(y+1);
                    marked[x][y+1] = true;
                }
            }
            queueX = tmpQueueX;
            queueY = tmpQueueY;
        }
        if(surrounded){
            replace(listX, listY, board, 'X');
        }
        else{
            replace(listX, listY, board, '1');
        }
    }
    
    private boolean ableToVisit(int x, int y, boolean[][] marked, char[][] board){
        return x >= 0 && x < marked.length && y >= 0 && y < marked[0].length && !marked[x][y] && board[x][y] == 'O';
    }
    
    private boolean atBoundary(int x, int y, char[][] board){
        return x == 0 || x == board.length - 1 || y == 0 || y == board[0].length - 1;
    }
    private void replace(List<Integer> listX, List<Integer> listY, char[][] board, char tmp){
        for(int i = 0; i < listX.size(); i++){
            board[listX.get(i)][listY.get(i)] = tmp;
        }
    }
    

}
