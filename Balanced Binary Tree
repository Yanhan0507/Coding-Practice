/*
  Given a binary tree, determine if it is height-balanced.
  
  For this problem, a height-balanced binary tree is defined
  as a binary tree in which the depth of the two subtrees of
  every node never differ by more than 1.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    boolean balanced = true;
    
    public boolean isBalanced(TreeNode root) {
        getHeight(root);
        return balanced;
    }
    private int getHeight(TreeNode root){
        if(root == null){
            return 0;
        }    
        int r = getHeight(root.right);
        int l = getHeight(root.left);
        if(Math.abs(r - l) > 1){
            balanced = false;
        }
        return Math.max(r, l) + 1;
    }
}


 // this solution is more time-consuming, but without using a global variable
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null){
            return true;
        }
        if( Math.abs(getHeight(root.right) - getHeight(root.left)) > 1){
            return false;
        }
        return isBalanced(root.left) && isBalanced(root.right);
    }
    
    // get height defind by maximla and minimal height is different
    private int getHeight(TreeNode root){
        if(root == null){
            return 0;
        }
        return Math.max(getHeight(root.left), getHeight(root.right)) + 1;
    }
}
