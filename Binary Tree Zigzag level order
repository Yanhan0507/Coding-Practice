/*
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 //  Result relates to Integer, so we need to make lists regarding Integer and TreeNode recursively. 
 //  Dont write code like List<TreeNode> list = new ArrayList<Integer>();
 
public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        // while loop + for loop better than for loop + for loop
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root == null){
            return result;
        }
        List<TreeNode> list = new ArrayList<TreeNode>();
        list.add(root);
        boolean flag = true;
        while(list.size() > 0){
            List<Integer> num = new ArrayList<Integer>();
            List<TreeNode> tmp = new ArrayList<TreeNode>();
            for(int i=0; i<list.size(); i++){
                TreeNode t = list.get(i);
                num.add(t.val);
                if(t.left != null){
                    tmp.add(t.left);
                }
                if(t.right != null){
                    tmp.add(t.right);
                }
            }
            list = tmp;
            if(!flag){
                Collections.reverse(num);
            }
            flag = !flag;
            result.add(num);
        }
        return result;
    }
}
