/*
  Given an array of n positive integers and a positive integer s, 
  find the minimal length of a subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.
  
  For example, given the array [2,3,1,2,4,3] and s = 7,
  the subarray [4,3] has the minimal length under the problem constraint.
*/
public class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        boolean founded = false;
        int first = 0;
        int sum = 0;
        int length = Integer.MAX_VALUE;
        for(int i=0; i<nums.length; i++){
            sum += nums[i];
            while(sum - nums[first] >= s){
                sum -= nums[first++];
            }
            if(sum >= s && i - first + 1 < length){
                length = i - first + 1;
                founded = true;
                sum -= nums[first++];
            }

        }
        if(!founded){
            return 0;
        }
        return length;
    }
}
