/*
	Given a binary tree, return the level order traversal of its nodes' values. 
	(ie, from left to right, level by level).
	
	For example:
	Given binary tree {3,9,20,#,#,15,7},
	    3
	   / \
	  9  20
	    /  \
	   15   7
	return its level order traversal as:
	[
	  [3],
	  [9,20],
	  [15,7]
	]
*/

public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root == null){
            return result;
        }
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        while( !queue.isEmpty() ){
        	List<Integer> list = new ArrayList<Integer>();
        	LinkedList<TreeNode> tmpQueue = new LinkedList<TreeNode>();
        	while(!queue.isEmpty()){
        		TreeNode node = queue.poll();
        		list.add(node.val);
        		if(node.left != null){
        			tmpQueue.add(node.left);
        		}
        		if(node.right != null){
        			tmpQueue.add(node.right);
        		}
        	}
        	queue = tmpQueue;
        	result.add(new ArrayList<Integer>(list));
        }
        return result;
    }
}
