/*
  Given a string s and a dictionary of words dict, add spaces in s to construct 
  a sentence where each word is a valid dictionary word.
  
  Return all such possible sentences.
  
  For example, given
  s = "catsanddog",
  dict = ["cat", "cats", "and", "sand", "dog"].
  
  A solution is ["cats and dog", "cat sand dog"].
*/

public class Solution {
    public List<String> wordBreak(String s, Set<String> wordDict) {
        Map<Integer, List<String>> map = new HashMap<Integer, List<String>>();
        map.put(0, new ArrayList<String>());
        for(int i = 0; i < s.length(); i ++){
            if(!map.containsKey(i)){
                continue;
            }
            for(String word: wordDict){
                int len = word.length();
                if(i + len <= s.length()){
                    String str = s.substring(i, i + len);
                    if(word.equals(str)){
                        if(map.containsKey(i + len)){
                            map.get(i + len).add(str);
                        }
                        else{
                            List<String> list = new ArrayList<String>();
                            list.add(str);
                            map.put(i + len, list);
                        }
                    }
                }
            }
        }
        
        List<String> result = new ArrayList<String>();
        if(map.containsKey(s.length())){
            buildSolution(map, new ArrayList<String>(), s.length(), result);
        }
        return result;
    }
    
    private void buildSolution(Map<Integer, List<String>> map, List<String> path, int index, List<String> result){
        if(index == 0){
            List<String> newPath = new ArrayList<String>(path);
            Collections.reverse(newPath);
            int i = 0;
            StringBuilder sb = new StringBuilder();
            while(i < newPath.size()){
                sb.append(newPath.get(i));
                sb.append(" ");
                i++;
            }
            sb.deleteCharAt(sb.length() - 1);
            result.add(sb.toString());
            return;
        }
        List<String> list = map.get(index);
        for(String str: list){
            path.add(str);
            buildSolution(map, path, index - str.length(), result);
            path.remove(path.size() - 1);
        }
    }
}
