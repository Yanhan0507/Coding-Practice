/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
 //  Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
 
 
 
 /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0){
            return null;
        }
        ListNode dummy = new ListNode(-1);
        ListNode prev = dummy;
        Comparator<ListNode> comp = new Comparator<ListNode>(){
            public int compare(ListNode n0, ListNode n1){
                if(n0.val > n1.val){
                    return 1;
                }
                else if(n0.val == n1.val){
                    return 0;
                }
                else{
                    return -1;
                }
            }
        };
        PriorityQueue<ListNode> pq = new PriorityQueue<ListNode>(lists.length, comp);
        for(ListNode n: lists){
            if(n!= null){
                pq.add(n);
            }
        }
        while(!pq.isEmpty()){
            ListNode cur = pq.poll();
            prev.next = cur;
            prev = cur;
            if(cur.next != null){
                pq.offer(cur.next);
            }
        }
        return dummy.next;
    }
}



 // brute force solution
 // O(LN)  to add each node, we need to process the whole list
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0){
            return null;
        }
        ListNode dummy = new ListNode(-1);
        ListNode prev = dummy;
        boolean end = false;
        while(!end){
            int index = 0;
            ListNode min = null;
            for(int i = 0; i < lists.length; i++){
                ListNode node = lists[i];
                if(node == null){
                    continue;
                }
                else if(min == null || min.val > node.val){
                    min = node;
                    index = i;
                }
            }
            if(min == null){
                end = true;
                break;
            }
            prev.next = min;
            prev = min;
            lists[index] = min.next;
        }
        return dummy.next;
    }
}
