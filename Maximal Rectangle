// Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing all ones and return its area.

public class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix == null || matrix.length == 0){
            return 0;
        }
        int[] record = new int[matrix[0].length];
        int max = 0;

        for(int i = 0; i < matrix.length; i++){
            for(int j = 0; j < matrix[i].length; j++){
                if(matrix[i][j] == '1'){
                    record[j] += 1;
                }
                else{
                    record[j] = 0;
                }
            }
            max = Math.max(largestRectangleArea(record), max);
        }
        return max;
    }
    
    public int largestRectangleArea(int[] height) {
        if(height == null || height.length == 0){
            return 0;
        }
        Stack<Integer> stack = new Stack<Integer>();
        int max = 0;
        for(int i = 0; i <= height.length; i++){
            int cur = -1;
            if(i != height.length){
                cur = height[i];
            }
            if(stack.empty() || cur >= height[stack.peek()]){
                stack.push(i);
            }
            else{
                int tmp = stack.pop();
                int curArea = height[tmp]*(stack.empty()? i: i - 1 - stack.peek() );
                max = Math.max(max, curArea);
                i--;
            }
        }
        return max;
    }
}



// O(n^3)

public class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix == null || matrix.length == 0){
            return 0;
        }
        int[][] record = new int[matrix.length][matrix[0].length];
        for(int i = 0; i < matrix.length; i++){
            for(int j = 0; j < matrix[0].length; j++){
                if(matrix[i][j] == '1'){
                    if(j == 0){
                        record[i][j] = 1;
                    }
                    else{
                        record[i][j] = record[i][j-1] + 1;
                    }
                }
            }
        }
        int max = 0;
        for(int i = 0; i < record.length; i++){
            for(int j = 0; j < record[i].length; j++){
                max = Math.max(max, findMax(record, i, j));
            }
        }
        return max;
    }
    
    private int findMax(int[][] record, int i, int j){
        int up = i, down = i;
        int downResult = i;
        int upResult = i;
        int length = record[i][j];
        while( up >= 0){
            if(record[up][j] >= length){
                upResult = up;
                up--;
            }
            else{
                break;
            }
        }
        while(down < record.length){
            if(record[down][j] >= length){
                downResult = down;
                down++;
            }
            else{
                break;
            }
        }
        int width = downResult - upResult + 1;
        return length*width;
        
    }
}
