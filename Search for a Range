/*
  Given a sorted array of integers, find the starting and ending position of a given target value.
  
  Your algorithm's runtime complexity must be in the order of O(log n).
  
  If the target is not found in the array, return [-1, -1].
  
  For example,
  Given [5, 7, 7, 8, 8, 10] and target value 8,
  return [3, 4].
*/
public class Solution {
    public int[] searchRange(int[] nums, int target) {
        int start  = 0;
        int end = nums.length - 1;
        int mid = (start + end)/2;;
        int[] result = {-1, -1};
        boolean founded = false;
        while(start <= end){
            if(nums[mid] == target){
                founded = true;
                break;
            }
            else if(nums[mid] < target){
                start = mid + 1;
            }
            else{
                end = mid - 1;
            }
            mid = (start + end)/2;
        }
        if(!founded){
            return result;
        }
        start = mid;
        end = mid;
        while(start >= 0 && nums[start] == target){
            start--;
        }
        while(end <= nums.length - 1 && nums[end] == target){
            end++;
        }
        result[0] = start + 1;
        result[1] = end - 1;
        return  result;
    }
}
