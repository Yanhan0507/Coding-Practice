/*
  Given a binary tree, return the inorder traversal of its nodes' values.
  
  For example:
  Given binary tree {1,#,2,3},
     1
      \
       2
      /
     3
  return [1,3,2].
  
  Note: Recursive solution is trivial, could you do it iteratively?
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        Stack<TreeNode> stack = new Stack<TreeNode>();
        if(root == null){
            return result;
        }
        TreeNode cur = root;
        while(cur!=null || stack.size()>0){
            while(cur!=null){
                stack.push(cur);
                cur = cur.left;
            }
            if(stack.size()>0){
                TreeNode t = stack.pop();
                result.add(t.val);
                cur = t.right;
            }

        }
        return result;
    }
}
