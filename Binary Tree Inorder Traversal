/*
  Given a binary tree, return the inorder traversal of its nodes' values.
  
  For example:
  Given binary tree {1,#,2,3},
     1
      \
       2
      /
     3
  return [1,3,2].
  
  Note: Recursive solution is trivial, could you do it iteratively?
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 /*
      At the very beginning, I once thought the condition for while loop should be stack.empty(), and everytime we just need 
      to process poped element untile the stack is empty. However, I faced a problem: when we get a poped element, we dont 
      know whether its left child has been visited or not. If its left child has already been visited, we can simply print 
      it and then go to its right child , otherwise,  we need to push the left child to stack. So, we may need some additional 
      space to record this information: 1) using a visited HashSet 2) add a flag to each node. However, both of these 
      solutions cost extra space.
      Actually, we can only push the current node and its left child (never push right child explicitly), until it is null. And 
      then we pop a element from stack, and this element is what we need to process right now. Also, this element has an 
      important feature: it has no left child, or its left child has been visted(its left child must poped and thus has been 
      visited ealier). According to this feature, we simpy print its value, and let current node be its right child. If its 
      right child is null, we pop() a new element element from stack, otherwise, we push the current node and all of its left 
      children to stack (like the previous steps)
      Forgive my trival explanation, I guess the code below can explain it more clear.
 */
 
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        Stack<TreeNode> stack = new Stack<TreeNode>();
        if(root == null){
            return result;
        }
        TreeNode cur = root;
        while(cur!=null || !stack.empty()){
            while(cur!=null){
                stack.push(cur);
                cur = cur.left;
            }
                TreeNode t = stack.pop();
                result.add(t.val);
                cur = t.right;
        }
        return result;
    }
}
