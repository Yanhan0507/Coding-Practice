
/*
  Given preorder and inorder traversal of a tree, construct the binary tree.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length == 0 || inorder.length == 0){
            return null;
        }
        return buildTree(preorder, inorder, 0, preorder.length - 1, 0, inorder.length - 1);
    }
    
    public TreeNode buildTree(int[] preorder, int[] inorder, int prestart, int preend, int instart, int inend){
        if(prestart > preend){
            return null;
        }
        TreeNode root = new TreeNode(preorder[prestart]);
        int record = 0;
        for(int i = instart; i<= inend; i++){
            if(preorder[prestart] == inorder[i]){
                record = i;
                break;
            }
        }
        root.left = buildTree(preorder, inorder, prestart + 1, prestart + record - instart, instart, record - 1);
        root.right = buildTree(preorder, inorder, prestart + record - instart + 1, preend, record + 1, inend);
        return root;
    }
}
