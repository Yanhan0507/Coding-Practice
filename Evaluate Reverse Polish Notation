/*
  Evaluate the value of an arithmetic expression in Reverse Polish Notation.
  
  Valid operators are +, -, *, /. Each operand may be an integer or another expression.
  
  Some examples:
    ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
    ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6
*/

public class Solution {
    public int evalRPN(String[] tokens) {
        if(tokens.length == 0){
            return 0;
        }
        Stack<Integer> num = new Stack<Integer>();
        
        for(int i=0; i<tokens.length; i++){
            if(tokens[i].equals("+") || tokens[i].equals("-") 
            || tokens[i].equals("*")|| tokens[i].equals("/")){
                int rhs = num.pop();                            //  the first num poped which is actually scond number, so it's right-hand-side  
                int lhs = num.pop();              
                if(tokens[i].equals("+")){
                    num.push(lhs+rhs);
                }
                else if(tokens[i].equals("*")){
                    num.push(lhs*rhs);                      
                }
                else if(tokens[i].equals("/")){
                    num.push(lhs/rhs);
                }
                else{
                    num.push(lhs-rhs);
                }
            }
            else{
                num.push(Integer.valueOf(tokens[i]));
            }
        }
        return num.pop();
        
    }
}
