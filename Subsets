
/*
    My Submissions Question Solution 
    Given a set of distinct integers, nums, return all possible subsets.
    
    Note:
    Elements in a subset must be in non-descending order.
    The solution set must not contain duplicate subsets.
    For example,
    If nums = [1,2,3], a solution is:
    
    [
      [3],
      [1],
      [2],
      [1,2,3],
      [1,3],
      [2,3],
      [1,2],
      []
    ]
*/
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        subsets(result, new ArrayList<Integer>(), nums, 0);
        return result;
    }
    
    public void subsets(List<List<Integer>> result, List<Integer> list, int[] nums, int index){
        if(index == nums.length){
            result.add(new ArrayList(list));                // dont write like result.add(list), java is always shallow copy
            return;                                         // dont forget return in exit
        }
        list.add(nums[index]);
        subsets(result, list, nums, index + 1);
        list.remove(list.size() - 1);
        subsets(result, list, nums, index + 1);
    }
}
