/*
  The set [1,2,3,â€¦,n] contains a total of n! unique permutations.
  
  By listing and labeling all of the permutations in order,
  We get the following sequence (ie, for n = 3):
  
  "123"
  "132"
  "213"
  "231"
  "312"
  "321"
  Given n and k, return the kth permutation sequence.
  
  Note: Given n will be between 1 and 9 inclusive.
*/
public class Solution {
    public String getPermutation(int n, int k) {
        Set<Integer> set = new HashSet<Integer>();
        List<Integer> list = new ArrayList<Integer>();
        StringBuilder sb = new StringBuilder();
        int i = 1;
        while(i <= n){
            set.add(i);
            list.add(i++);
        }
        
        int times = k;
        while(!set.isEmpty()){
            int size = set.size();
            int curTimes = factorial(size - 1);
            int a = 1;
            while(times > curTimes){
                times -= curTimes;
                a++;
            }
            int cur = getSmallNumber(a, set, list);
            sb.append(cur);
        }
        return sb.toString();
        
    }
    
    
    private int getSmallNumber(int a, Set<Integer> set, List<Integer> list){
        int i = 0;
        int counter = 0;
        while(counter < a && i < list.size()){
            int cur = list.get(i);
            if(set.contains(cur)){
                counter++;
            }
            i++;
        }
        set.remove(list.get(i-1));
        return list.get(i-1);
    }
    
    private int factorial(int n){
        int result = 1;
        while(n > 1){
            result *= n;
            n--;
        }
        return result;
    }
}
