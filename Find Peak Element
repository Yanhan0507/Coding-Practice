/*
	A peak element is an element that is greater than its neighbors.
	Given an input array where num[i] ≠ num[i+1], find a peak element 
	and return its index.
	The array may contain multiple peaks, in that case return the index 
	to any one of the peaks is fine.
	You may imagine that num[-1] = num[n] = -∞.
	For example, in array [1, 2, 3, 1], 3 is a peak element and your 
	function should return the index number 2.
	Note:
	Your solution should be in logarithmic complexity.
*/

public class Solution {
    public int findPeakElement(int[] nums) {
    	if(nums.length == 0){
    		return -1;
    	}
    	if(nums.length == 1){    // remember to handle corner case
    		return 0;
    	}
        return findPeakElement(nums, 0, nums.length-1);
    }
    
    private int findPeakElement(int[] nums, int start, int end) {
    	if(start > end){
    		return -1;
    	}
    	int mid = (start + end)/2;
    	if(mid == 0){
    		if(nums[mid] > nums[mid + 1]){
    			return mid;
    		}
    		else{
    			return findPeakElement(nums, mid + 1, end);
    		}
    	}
    	else if(mid == nums.length - 1){
    		if(nums[mid] > nums[mid - 1]){
    			return mid;
    		}
    		else{
    			return findPeakElement(nums, start, mid - 1);
    		}
    	}
    	else {
    	    if(nums[mid] > nums[mid - 1] && nums[mid] > nums[mid + 1]){
    			return mid;
    	    }
    		if(nums[mid] < nums[mid + 1]){
    			return findPeakElement(nums, mid + 1, end);
    		}
    		else if(nums[mid] < nums[mid - 1]){
    		    return findPeakElement(nums, start, mid - 1);
    		}
    	}
    	return -1234142214;
    }
}
