/*
  Given a m x n grid filled with non-negative numbers, find a path 
  from top left to bottom right which minimizes the sum of all numbers along its path.
  
  Note: You can only move either down or right at any point in time.
*/

// O(n) space
public class Solution {
    public int minPathSum(int[][] grid) {
        int[] result = new int[grid.length];
        result[0] = grid[0][0];
        for(int i = 1; i < grid.length; i++){
            result[i] = result[i-1] + grid[i][0];
        }
        for(int j = 1; j < grid[0].length; j ++){
            for(int i = 0; i < grid.length; i ++){
                if(i == 0){
                    result[i] = result[i] + grid[i][j];
                }
                else{
                    result[i] = Math.min(result[i], result[i-1]) + grid[i][j];
                }
            }
        }
        return result[result.length - 1];
    }
}

// O(n^2) space
public class Solution {
    public int minPathSum(int[][] grid) {
        int[][] result = new int[grid.length][grid[0].length];
        result[0][0] = grid[0][0];
        for(int i = 1; i < grid.length; i++){
            result[i][0] = result[i-1][0] + grid[i][0];
        }
        for(int i = 1; i < grid[0].length; i++){
            result[0][i] = result[0][i-1] + grid[0][i];
        }
        for(int i = 1; i < grid.length; i++){
            for(int j = 1; j < grid[0].length; j++){
                result[i][j] = Math.min(result[i-1][j], result[i][j-1]) + grid[i][j];
            }
        }
        return result[result.length - 1][result[0].length - 1];
    }
}
