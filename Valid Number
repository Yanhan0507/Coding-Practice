/*
  Validate if a given string is numeric.
  
  Some examples:
  "0" => true
  " 0.1 " => true
  "abc" => false
  "1 a" => false
  "2e10" => true
  Note: It is intended for the problem statement to be ambiguous. 
  You should gather all requirements up front before implementing one.
*/
public class Solution {
    public boolean isNumber(String s) {
        if(s == null || s.length() == 0){
            return false;
        }
        s = s.trim();
        if(s.length() == 0){
            return false;
        }
        int numOfe = 0;
        int numOfdot = 0;
        int numOfdigit = 0;
        int numOfsign = 0;
        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if(!isValid(c)){
                return false;
            }
            if(c == '.'){
                if(numOfdot != 0 || numOfe != 0 || (numOfdigit == 0 && i == s.length()-1)){
                    return false;
                }
                numOfdot++;
            }
            else if(c == 'e' || c == 'E'){
                if(numOfe != 0 || i == 0 || numOfdigit == 0 || i == s.length() - 1 ){
                    return false;
                }
                numOfe++;
            }
            else if(c == '+' || c == '-'){
                if(numOfsign > 1 || i == s.length()-1 || ( i!=0 && s.charAt(i-1) != 'e' && s.charAt(i-1) != 'E')){
                    return false;
                }
                numOfsign++;
            }
            else{
                numOfdigit++;
            }
        }
        return true;
    }
    
    private boolean isValid(char c){
        return (c<='9' && c>='0') || c == 'e' || c == 'E' || c == '.' || c == '+' || c == '-';
    }
}
