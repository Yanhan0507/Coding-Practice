/*
  Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.
  
  Below is one possible representation of s1 = "great":
  
      great
     /    \
    gr    eat
   / \    /  \
  g   r  e   at
             / \
            a   t
  To scramble the string, we may choose any non-leaf node and swap its two children.
  
  For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".
  
      rgeat
     /    \
    rg    eat
   / \    /  \
  r   g  e   at
             / \
            a   t
  We say that "rgeat" is a scrambled string of "great".
  
  Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".
  
      rgtae
     /    \
    rg    tae
   / \    /  \
  r   g  ta  e
         / \
        t   a
  We say that "rgtae" is a scrambled string of "great".
  
  Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.
*/
public class Solution {
    public boolean isScramble(String s1, String s2) {
        s1.toLowerCase();
        s2.toLowerCase();
        int[][][][] M = new int[s1.length()][s1.length()][s2.length()][s2.length()];
        if(s1.length() != s2.length()){
            return false;
        }
        return helper(s1, s2, 0, s1.length() - 1, 0, s2.length() - 1, M);
    }
    
    private boolean helper(String s1, String s2, int start1, int end1, int start2, int end2, int[][][][] M){
        if(end1 == start1){
            return s1.charAt(start1) == s2.charAt(start2);
        }
        if(M[start1][end1][start2][end2] != 0){
            return M[start1][end1][start2][end2] == -1?false:true;
        }
        int[] counter = new int[26];
        int length = end1 - start1 + 1;
        for(int i = 0; i < length; i++){
            int num1 = s1.charAt(start1 + i) - 'a';
            int num2 = s2.charAt(start2 + i) - 'a';
            counter[num1]++;
            counter[num2]--;
        }
        for(int i = 0; i < 26; i++){
            if(counter[i] != 0){
                M[start1][end1][start2][end2] = -1;
                return false;
            }
        }
        for(int i = start1; i < end1; i++){
            if(helper(s1, s2, start1, i, start2, start2 + i - start1, M) && 
            helper(s1, s2, i+1, end1, start2 + i - start1 + 1, end2, M)){
                M[start1][end1][start2][end2] = 1;
                return true;
            }
            if(helper(s1, s2, start1, i, end2 - (i - start1), end2, M) && 
            helper(s1, s2, i+1, end1, start2, end2 - (i - start1) - 1, M)){
                M[start1][end1][start2][end2] = 1;
                return true;   
            }
        }
        M[start1][end1][start2][end2] = -1;
        return false;
    }
    
}
