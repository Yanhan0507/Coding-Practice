/*
  Given two words (beginWord and endWord), and a dictionary, find the length of shortest transformation sequence from beginWord to endWord, such that:
  
  Only one letter can be changed at a time
  Each intermediate word must exist in the dictionary
  For example,
  
  Given:
  start = "hit"
  end = "cog"
  dict = ["hot","dot","dog","lot","log"]
  As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
  return its length 5.
  
  Note:
  Return 0 if there is no such transformation sequence.
  All words have the same length.
  All words contain only lowercase alphabetic characters.
*/

public class Solution {
    public int ladderLength(String beginWord, String endWord, Set<String> wordDict) {
        int level = 0;
        Queue<String> queue = new LinkedList<String>();
        Set<String> visited = new HashSet<String>();
        visited.add(beginWord);
        queue.add(beginWord);
        while(!queue.isEmpty()){
            Queue<String> tmpQueue = new LinkedList<String>();
            level ++;
            while(!queue.isEmpty()){
                String item = queue.poll();
                if(item.equals(endWord)){
                    return level;
                }
                List<String> neighbors = findNeighbors(item, visited, wordDict);
                for(String str: neighbors){
                    tmpQueue.add(str);
                }
            }
            queue = tmpQueue;
        }
        return 0;
    }
    
    
    private List<String> findNeighbors(String item, Set<String> visited, Set<String> wordDict){
        List<String> result = new ArrayList<String>();
        char[] array = item.toCharArray();
        for(int i = 0; i < array.length; i++){
            char recordChar = array[i];
            for(int k = 0; k < 26; k++){
                char newChar = (char)('a' + k);
                array[i] = newChar;
                String newStr = new String(array);
                if(!visited.contains(newStr) && wordDict.contains(newStr)){
                    result.add(newStr);
                    visited.add(newStr);
                }
            }
            array[i] = recordChar;
        }
        return result;
    }
}
