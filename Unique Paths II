/*
  Follow up for "Unique Paths":
  
  Now consider if some obstacles are added to the grids. How many unique paths would there be?
  
  An obstacle and empty space is marked as 1 and 0 respectively in the grid.
  
  For example,
  There is one obstacle in the middle of a 3x3 grid as illustrated below.
  
  [
    [0,0,0],
    [0,1,0],
    [0,0,0]
  ]
  The total number of unique paths is 2.
  
  Note: m and n will be at most 100.
  
  Show Tags
*/

public class Solution {
    //using a 1D array
    public int uniquePathsWithObstacles1(int[][] obstacleGrid) {
        boolean stucked = false;
        int[] record =new int[obstacleGrid.length];
        for(int i=0; i<obstacleGrid.length; i++){
            if(stucked){
                break;
            }
            if(obstacleGrid[i][0] == 1){
                stucked = true;
            }
            else{
                record[i] = 1;
            }
        }
        for(int i = 1; i<obstacleGrid[0].length; i++){
            for(int j = 0; j < obstacleGrid.length; j++){
                if( j == 0){
                    if(obstacleGrid[j][i] == 1){
                        record[j] = 0;
                    }
                }
                else{
                    if(obstacleGrid[j][i] == 1){
                        record[j] = 0;
                    }
                    else{
                        record[j] = record[j-1] + record[j];
                    }
                }
            }
        }
        return record[obstacleGrid.length - 1];
    }
    
    // the most efficient way: using the first row/first column to store info.
    // but the precondition is that we are allowed to change the value of obstacleGrid
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        boolean stucked = false;
        for(int i=0; i<obstacleGrid.length; i++){
            if(stucked){
                obstacleGrid[i][0] = 0;
            }
            else if(obstacleGrid[i][0] == 1){
                stucked = true;
                obstacleGrid[i][0] = 0;
            }
            else{
                obstacleGrid[i][0] = 1;
            }
        }
        for(int i = 1; i < obstacleGrid[0].length; i++){
            for(int j=0; j<obstacleGrid.length; j++){
                if(obstacleGrid[j][i] == 1){
                    obstacleGrid[j][0] = 0;
                }
                else if(j != 0){
                    obstacleGrid[j][0] = obstacleGrid[j-1][0] + obstacleGrid[j][0];
                }
            }
        }
        return obstacleGrid[obstacleGrid.length - 1][0];
    }
}
