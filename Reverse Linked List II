/*
    Reverse Linked List II Total Accepted: 42693 Total Submissions: 163880 My Submissions Question Solution 
    Reverse a linked list from position m to n. Do it in-place and in one-pass.
    
    For example:
    Given 1->2->3->4->5->NULL, m = 2 and n = 4,
    
    return 1->4->3->2->5->NULL.
    
    Note:
    Given m, n satisfy the following condition:
    1 ≤ m ≤ n ≤ length of list.
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        ListNode dummy = new ListNode(-1);
        dummy.next = head;
        ListNode prev = dummy;
        ListNode first = head;
        ListNode second = head;
        int index = 1;
        while(index < n){
            if(index < m){
                first = first.next;
                prev = prev.next;
            }
            second = second.next;
            index++;
        }
        
        ListNode rear = second.next;
        ListNode record = rear;
        while(first != second){
            ListNode tmp = first.next;
            first.next = rear;
            rear = first;
            first = tmp;
        }
        first.next = rear;
        prev.next = first;
        return dummy.next;
    }
}
